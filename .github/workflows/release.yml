name: Release to CocoaPods

#
# Test strategy
# 
# - unit-test:        Run all tests on latest macOS and Xcode.
# - unit-test-linux:  Run tests on Linux (Swift 5.1) - Not include the Combine extension tests.
# - integration-test: Run integration test using latest stable Xcode and Swift with CocoaPods. 
#

on:
  release:
    types: [published]

jobs:
  unit-test:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2

    - name: Run Unit Test
      run: make test

    - name: Write result
      if: always()
      run: echo ${{ job.status }} > job-result.txt

    - name: Upload job result for job slack-notify
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: result
        path: job-result.txt

  unit-test-linux:
    runs-on: ubuntu-latest
    container: swift:5.1

    steps:
    - uses: actions/checkout@v2

    - name: Run Unit Test
      run: make test

  integration-test:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    - name: Select latest stable Xcode
      run:
        xcodebuild -version

    - name: Cache bundler
      uses: actions/cache@v1
      with:
        path: vendor/bundle
        key: bundler-${{ hashFiles('Gemfile.lock') }}
        restore-keys: bundler-${{ hashFiles('Gemfile.lock') }}

    - name: Bundle install
      run: bundle

    - name: Run Integration Test
      run: make integration-test

    - name: Write result
      if: always()
      run: echo ${{ job.status }} > job-result.txt

    - name: Upload job result for job slack-notify
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: result
        path: job-result.txt

  deploy:
    runs-on: macos-latest
    needs: [unit-test, unit-test-linux, integration-test]

    steps:
    - uses: actions/checkout@v2

    - name: Cache bundler
      uses: actions/cache@v1
      with:
        path: vendor/bundle
        key: bundler-${{ hashFiles('Gemfile.lock') }}
        restore-keys: bundler-${{ hashFiles('Gemfile.lock') }}

    - name: Setup
      run: bundle

    - name: Lint
      run: make lint

    - name: Deploy to CocoaPods
      env:
        COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TRUNK_TOKEN }}
      run: make release

    - name: Write result
      if: always()
      run: echo ${{ job.status }} > job-result.txt

    - name: Upload job result for job slack-notify
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: result
        path: job-result.txt

  slack-notify:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
    - name: Download result for job slack-notify
      uses: actions/download-artifact@v1
      with:
        name: result

    - run: echo "::set-env name=JOB_RESULT::`cat ./result/job-result.txt`"

    # Note:
    # This action is run ubuntu only, because jobs are separated.
    - name: Slack Notification
      if: always()
      uses: rtCamp/action-slack-notify@v2.0.0
      env:
        SLACK_CHANNEL: swift-pretty-print-notify
        SLACK_COLOR: ${{ (env.JOB_RESULT == 'success' && 'good') || 'danger' }}
        SLACK_ICON: https://github.com/Penginmura.png?size=48
        SLACK_MESSAGE: ${{ env.JOB_RESULT }}
        SLACK_TITLE: Release
        SLACK_USERNAME: Bot
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
